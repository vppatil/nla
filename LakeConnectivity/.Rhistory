library("boot", lib.loc="C:/Program Files/R/R-2.14.1/library")
detach("package:boot", unload=TRUE)
library("boot", lib.loc="C:/Program Files/R/R-2.14.1/library")
detach("package:boot", unload=TRUE)
library("class", lib.loc="C:/Program Files/R/R-2.14.1/library")
detach("package:class", unload=TRUE)
asdf
install.packages("Hmisc")
library("boot", lib.loc="C:/Program Files/R/R-2.14.1/library")
plot()
plot(1,1)
plot(1,1)
plot(1,1)
plot(1,2)
plot(1,3)
.librarySources()
.libPaths()
version(0)
version()
v()
version
Sys.getenv("R_LIBS_USER")
version()
version
list('blah'='1')
list(blah='1')
tmp = read.csv('D:/grassdata/wiDnrSplit/wibcs.csv',as.is=T)
tmp
tmp[,2]
path = 'D:/Google Drive/Stratification/Bathymetry/wiDnrPdfs'
for(i in 1:length(tmp)){}
file.remove
?file.remove
file.exists(paste(path,tmp[1,2],sep='/'))
file.exists(paste(path,tmp[2,2],sep='/'))
file.exists(paste(path,tmp[2,2],'.pdf',sep='/'))
file.exists(paste(path,'/',tmp[2,2],'.pdf',sep='')
)
file.exists(paste(path,'/',tmp[2,2],'.pdf',sep=''))
file.exists(paste(path,'/',tmp[1,2],'.pdf',sep=''))
file.exists(paste(path,'/',tmp[3,2],'.pdf',sep=''))
file.exists(paste(path,'/',tmp[4,2],'.pdf',sep=''))
install.packages('inline')
library(inline)
doublematrix <- cxxfunction(signature(x = "numeric"), body = '
Rcpp::NumericMatrix xcpp(x);
int nrows = xcpp.nrow();
int ncolumns = xcpp.ncol();
for (int i = 0; i < nrows; i++){
for (int j = 0; j < ncolumns; j++){
xcpp[nrows * j + i] *= 2;
}
}
return xcpp;
', plugin="Rcpp")
install.packages('Rcpp')
doublematrix <- cxxfunction(signature(x = "numeric"), body = '
Rcpp::NumericMatrix xcpp(x);
int nrows = xcpp.nrow();
int ncolumns = xcpp.ncol();
for (int i = 0; i < nrows; i++){
for (int j = 0; j < ncolumns; j++){
xcpp[nrows * j + i] *= 2;
}
}
return xcpp;
', plugin="Rcpp")
vignette( "Rcpp-introduction" )
install.packages('Rtools')
tempdir()
tempdir()
tempdir()
tempdir()
?tempdir
tmpdir
ncdf.open
open.ncdf
library(ncdf)
open.ncdf
fineLayers = open.ncdf('D:/WILMA/InputFiles/WBIC_805400/output.nc')
fixedLayers = open.ncdf('D:/WILMA/InputFiles/WBIC_805400/output_fixedLayer.nc')
source('D:/WILMA/GLM-r/Source/GLMnetCDF.R')
source('D:/WILMA/GLM-r/Source/GlmPhysicalDerivatives.r')
plotGLM(fineLayers)
source('D:/WILMA/GLM-r/Source/GLMnetCDF.R')
plotGLM(fineLayers)
plotGLM(getTempGLMnc(fineLayers))
source('D:/WILMA/GLM-r/Source/GLMnetCDF.R')
plotGLM(getTempGLMnc(fineLayers))
getwd()
source('D:/WILMA/GLM-r/Source/GLMnetCDF.R')
dev.off()
install.packages('vegan')
version
library(sp)
library(shapefiles)
library(rgeos)
install.package
install.packages
install.packages(c('shapefiles','rgeos','rgdal','maptools','raster'))
roadproxpoints<-readOGR('D:/Dropbox/NLA analyses(1)/data/shapefiles/nlaNHD','roadproximitypoints.shp')
library(shapefiles)
library(rgeos)
install.packages(c('shapefiles','rgeos','rgdal','maptools','raster'))
library(rgeos)
version
library(rgeos)
library(rgeos)
library(rgdal)
library(maptools)
library(raster)
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R')
wedderburnNumber
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',type='source')
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R.zip',type='source')
waterDensity
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',type='source')
waterDensity
wedderburnNumber
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',repos=NULL, type='source')
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',repos=NULL, type='source')
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',repos=NULL, type='source')
?read.matrix
?read.matrix
install.packages('d:/Dropbox/rLakeAnalyzer/Lake-Analyzer-R',repos=NULL, type='source')
waterDensity
?waterDensity
wedderburnNumber
library(rLakeAnalyzer)
wedderburnNumber
?waterDensity
?remove.packages
remove.packages('rLakeAnalyzer')
library(rLakeAnalyzer)
waterDensity
rm(list=ls())
remove.packages('rLakeAnalyzer')
library(rLakeAnalyzer)
waterDensity
?waterDensity
rm(list=ls())
?ls
rm(list=ls(all.names=T))
library(rLakeAnalyzer)
rm(list=ls())
library(rLakeAnalyzer)
waterDensity
library(raster)
r <- raster(ncol=36, nrow=18)
r[] <- 1:ncell(r)
###############################
# extract values by cell number
###############################
extract(r, c(1:2, 10, 100))
s <- stack(r, sqrt(r), r/r)
extract(s, c(1, 10, 100), layer=2, n=2)
s
c
s
extract(s, c(1, 10, 100))
extract(s, c(1, 10, 100), layer=2, n=2)
?extract
s <- stack(r, sqrt(r), r/r)
extract(s, c(1, 10, 100), layer=2, n=2)
###############################
# extract values with polygons
###############################
cds1 <- rbind(c(-180,-20), c(-160,5), c(-60, 0), c(-160,-60), c(-180,-20))
cds2 <- rbind(c(80,0), c(100,60), c(120,0), c(120,-55), c(80,0))
polys <- SpatialPolygons(list(Polygons(list(Polygon(cds1)), 1),
Polygons(list(Polygon(cds2)), 2)))
plot(r)
plot(polys, add=TRUE)
v <- extract(r, polys)
v
# mean for each polygon
unlist(lapply(v, function(x) if (!is.null(x)) mean(x, na.rm=TRUE) else NA ))
v <- extract(r, polys, cellnumbers=TRUE)
# weighted mean
v <- extract(r, polys, weights=TRUE, fun=mean)
v
?rasterRoPoints
?rasterToPoints
?.rasterToPoints
?.polygonsToRaster
?polygonsToRaster
library(raster)
.polygonsToRaster
remove.packages('raster')
setwd("D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity")
file.path
file.path('blah','lasf')
cat('asdf')
nhd.file.dir   = 'D:/BigDatasets/Nhd'
condor.run.dir = 'D:/CondorLakeConn'
Sys.glob('*.zip')
file.path
Sys.glob(file.path(nhd.fild.dir,'*.zip')
)
Sys.glob(file.path(nhd.file.dir,'*.zip'))
Sys.glob(file.path(nhd.files.dir,'*.zip'))
tools = c('tools/bzip2.dll','tools/unzip.exe','tools/zip.exe')
tools
paste(tools)
paste(getwd(),tools)
file.path(getwd(),tools)
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
getwd()
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
file.exist
file.exists
?file.exists
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
i=195
runDir = file.path(condor.run.dir, i)
if(file.exists(runDir) && file.exists(file.path(runDir,'out.zip'))){
next
}else if(!file.exists(runDir)){
dir.create(runDir)
}
cat(i, "\n")
input.files = c(tools, code, nhd.zipfiles[i])
condor.write.submit(file.path(runDir,'submit.cmd'), executable, input.files=input.files)
setwd(runDir)
system('condor_submit submit.cmd')
setwd(codeDir)
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
i=107
runDir = file.path(condor.run.dir, i)
if(file.exists(runDir) && file.exists(file.path(runDir,'out.zip'))){
next
}else if(!file.exists(runDir)){
dir.create(runDir)
}
cat(i, "\n")
input.files = c(tools, code, nhd.zipfiles[i])
condor.write.submit(file.path(runDir,'submit.cmd'), executable, input.files=input.files)
setwd(runDir)
system('condor_submit submit.cmd')
setwd(codeDir)
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
i=185
runDir = file.path(condor.run.dir, i)
if(file.exists(runDir) && file.exists(file.path(runDir,'out.zip'))){
next
}else if(!file.exists(runDir)){
dir.create(runDir)
}
cat(i, "\n")
input.files = c(tools, code, nhd.zipfiles[i])
condor.write.submit(file.path(runDir,'submit.cmd'), executable, input.files=input.files)
setwd(runDir)
system('condor_submit submit.cmd')
setwd(codeDir)
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
rm(list=ls())
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_lake_connectivity.R')
cat(1)
cat(1, 'asdf')
stop(1, 'asdf')
Sys.glob(file.path(condor.run.dir,'*/*.zip'))
source('D:/Dropbox/NLA analyses (1)/R code/LakeConnectivity/condorize_connectivity_postanalysis.R')
rm(list=ls())
# setwd("E:/CEH Lancaster/GLEON/Fellowship/Comparison of gas flux/gleonfp_modelling/DOModel")
## This will be the location where all of our scripts are located i.e. our functions
source(file.path("Functions", "readFiles.R"))
